{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gusta\\\\exercicios\\\\projeto-quiz\\\\src\\\\context\\\\quiz.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from \"react\";\nimport question from \"../data/question_complete.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STAGES = [\"Start\", \"Playing\", \"End\"];\nconst initialState = {\n  gameStage: STAGES[0],\n  question,\n  currentQuestion: 0,\n  score: 0,\n  answerSelected: false\n};\nconst quizReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE_STATE\":\n      return {\n        ...state,\n        gameStage: STAGES[1]\n      };\n    case \"START_GAME\":\n      let quizQuestions = null;\n      state.questions.forEach(question => {\n        if (question.category === action.payload) {\n          quizQuestions = question.questions;\n        }\n      });\n      return {\n        ...state,\n        questions: quizQuestions,\n        gameStage: STAGES[2]\n      };\n    case \"REORDER_QUESTIONS\":\n      const reorderedQuestions = question.sort(() => {\n        return Math.random() - 0.5;\n      });\n      return {\n        ...state,\n        question: reorderedQuestions\n      };\n    case \"CHANGE_QUESTION\":\n      const nexQuestion = state.currentQuestion + 1;\n      let endGame = false;\n      if (!question[nexQuestion]) {\n        endGame = true;\n      }\n      return {\n        ...state,\n        currentQuestion: nexQuestion,\n        gameStage: endGame ? STAGES[2] : state.gameStage,\n        answerSelected: false\n      };\n    case \"NEW_GAME\":\n      return initialState;\n    case \"CHECK_ANSWER\":\n      if (state.answerSelected) return state;\n      const answer = action.payload.answer;\n      const option = action.payload.option;\n      let correctAnswer = 0;\n      if (answer === option) correctAnswer = 1;\n      return {\n        ...state,\n        score: state.score + correctAnswer,\n        answerSelected: option\n      };\n    default:\n      return state;\n  }\n};\nexport const QuizContext = /*#__PURE__*/createContext();\nexport const QuizProvider = ({\n  children\n}) => {\n  _s();\n  const value = useReducer(quizReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(QuizContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 12\n  }, this);\n};\n_s(QuizProvider, \"HDl9A1duRDI+maTNi9v2R1p+EwQ=\");\n_c = QuizProvider;\nvar _c;\n$RefreshReg$(_c, \"QuizProvider\");","map":{"version":3,"names":["createContext","useReducer","question","jsxDEV","_jsxDEV","STAGES","initialState","gameStage","currentQuestion","score","answerSelected","quizReducer","state","action","type","quizQuestions","questions","forEach","category","payload","reorderedQuestions","sort","Math","random","nexQuestion","endGame","answer","option","correctAnswer","QuizContext","QuizProvider","children","_s","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gusta/exercicios/projeto-quiz/src/context/quiz.js"],"sourcesContent":["import { createContext, useReducer } from \"react\";\r\nimport question from \"../data/question_complete.js\";\r\n\r\nconst STAGES = [\"Start\", \"Playing\", \"End\"];\r\n\r\nconst initialState = {\r\n    gameStage: STAGES[0],\r\n    question,\r\n    currentQuestion: 0,\r\n    score: 0,\r\n    answerSelected: false,\r\n};\r\n\r\nconst quizReducer  = (state, action) => {\r\n\r\n    switch(action.type){\r\n        case \"CHANGE_STATE\":\r\n            return {\r\n                ...state,\r\n                gameStage: STAGES[1],\r\n            }\r\n\r\n\r\n            case \"START_GAME\":\r\n                let quizQuestions = null;\r\n          \r\n                state.questions.forEach((question) => {\r\n                  if (question.category === action.payload) {\r\n                    quizQuestions = question.questions;\r\n                  }\r\n                });\r\n          \r\n                return {\r\n                  ...state,\r\n                  questions: quizQuestions,\r\n                  gameStage: STAGES[2],\r\n                };    \r\n\r\n\r\n        case \"REORDER_QUESTIONS\":\r\n                const reorderedQuestions = question.sort(() => {\r\n                    return Math.random() - 0.5;\r\n                });\r\n              \r\n                return {\r\n                    ...state,\r\n                    question: reorderedQuestions,\r\n                };\r\n\r\n            case \"CHANGE_QUESTION\":\r\n                const nexQuestion = state.currentQuestion + 1;\r\n                let endGame = false\r\n\r\n                if(!question[nexQuestion]){\r\n                    endGame = true;\r\n                }\r\n\r\n                return{\r\n                    ...state,\r\n                    currentQuestion: nexQuestion,\r\n                    gameStage: endGame ? STAGES[2] : state.gameStage,\r\n                    answerSelected: false,\r\n                }    \r\n\r\n                case \"NEW_GAME\":\r\n                    return initialState;\r\n\r\n                case \"CHECK_ANSWER\":    \r\n\r\n                if(state.answerSelected) return state;\r\n\r\n                   const answer = action.payload.answer\r\n                   const option = action.payload.option\r\n                   let correctAnswer = 0\r\n\r\n                   if(answer === option) correctAnswer = 1;\r\n\r\n                   return {\r\n                    ...state,\r\n                    score: state.score + correctAnswer,\r\n                    answerSelected: option,\r\n                   };\r\n\r\n            default: \r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const QuizContext = createContext()\r\n\r\nexport const QuizProvider = ({children}) => {\r\n\r\n    const value = useReducer(quizReducer, initialState);\r\n    return <QuizContext.Provider value={value}>{children}</QuizContext.Provider>;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}